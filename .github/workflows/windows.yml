name: windows_build

on:
  workflow_dispatch:
  push:
    branches: 'main'

jobs:
  windows:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v2

      - name: Download dependencies
        run: ./download_deps.sh
        shell: bash

      - name: Install NSIS
        run: |
            irm get.scoop.sh -outfile 'install.ps1'
            .\install.ps1 -RunAsAdmin
            scoop bucket add extras
            scoop install nsis
      - name: Print NSIS version
        run: makensis -VERSION
      - name: Print NSIS compile flags
        run: makensis -HDRINFO
      - name: Download plugins
        run: curl 'https://nsis.sourceforge.io/mediawiki/images/7/7f/EnVar_plugin.zip' -Lo EnVar_plugin.zip
        shell: bash
      - name: Extract NSIS Plugins
        run: Expand-Archive -LiteralPath 'EnVar_plugin.zip' -DestinationPath 'C:\Program Files (x86)\NSIS'
      - name: Prepare x64 installer script
        run: |
            sed \
                -e 's/PythonInstaller.exe/PythonInstaller-x64.exe/g' \
                -e 's/python_packages/python_packages-x64/g' \
                -e 's/VSCodeSetup.exe/VSCodeSetup-x64.exe/g' \
                -e 's/smauglys_installer.exe/smauglys_installer-x64.exe/g' \
                install_script.nsi > install_script_x64.nsi
        shell: bash
      - name: Prepare ia32 installer script
        run: |
            sed \
                -e 's/PythonInstaller.exe/PythonInstaller-ia32.exe/g' \
                -e 's/python_packages/python_packages-ia32/g' \
                -e 's/Python38/Python38-32/g' \
                -e 's/VSCodeSetup.exe/VSCodeSetup-ia32.exe/g' \
                -e 's/smauglys_installer.exe/smauglys_installer-ia32.exe/g' \
                -e 's/PROGRAMFILES64/PROGRAMFILES/g' \
                install_script.nsi > install_script_ia32.nsi
        shell: bash
      - name: Create x64 installer
        run: makensis install_script_x64.nsi
      - name: Create ia32 installer
        run: makensis install_script_ia32.nsi

      - name: Create release tag
        shell: bash
        run: echo "TAG_NAME=$(date +v-%Y-%m-%d-%H%M)" >> $GITHUB_ENV

      - name: Create nightly release
        id: create_nightly_release
        uses: actions/create-release@v1
        env:
          # This token is provided by Actions, you do not need to create your own token
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Nightly Release ${{ env.TAG_NAME }}
          body: Naktinis smauglys.
          draft: false
          prerelease: true

      - name: Store nightly release upload URL
        shell: bash
        run: echo "UPLOAD_URL=${{ steps.create_nightly_release.outputs.upload_url }}" >> $GITHUB_ENV

      - name: Upload NSIS x64 Smauglys installer
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: smauglys_installer-x64.exe
          asset_name: LR-NŠA-Python-installer-x64-${{ env.TAG_NAME }}.exe
          asset_content_type: application/octet-stream

      - name: Upload NSIS ia32 Smauglys installer
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: smauglys_installer-ia32.exe
          asset_name: LR-NŠA-Python-installer-ia32-${{ env.TAG_NAME }}.exe
          asset_content_type: application/octet-stream
